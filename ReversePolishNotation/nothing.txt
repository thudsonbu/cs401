// // operator hashmap (consumer is function interface)
        // HashMap<String, BiFunction<String, String, String>> operands = new HashMap<>();

        // operands.put("+", (String a, String b) -> addStrings(a, b));
        // operands.put("-", (String a, String b) -> subtractStrings(a, b));
        // operands.put("*", (String a, String b) -> multiplyStrings(a, b));
        // operands.put("/", (String a, String b) -> divideStrings(a, b));

// if (operands.containsKey(element)){

            //     String add2 = stack.pop();
            //     String add1 = stack.pop();

            //     String result = operands.get(element).apply(add1, add2);

            //     stack.push(result);

            // } else {

            //     stack.push(element);
            // }